trigger:
  - "main"

variables:
  buildConfiguration: "Release"
  leaderboardRepository: "leaderboard"
  webRepository: "web"
  tag: "$(Build.BuildId)"
  imagePullSecret: "secret"

stages:
  # ---------------------------
  # Build Stage
  # ---------------------------
  - stage: "Build"
    displayName: "Build Docker images"
    jobs:
      - job: "Build"
        displayName: "Build Docker images"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          # Build and Push Web App Docker Image
          - task: Docker@2
            displayName: "Build and push web image"
            inputs:
              command: buildAndPush
              buildContext: $(Build.Repository.LocalPath)
              repository: $(webRepository)
              dockerfile: "$(Build.SourcesDirectory)/Tailspin.SpaceGame.Web/Dockerfile"
              containerRegistry: "Container Registry Connection"
              tags: |
                $(tag)

          # Build and Push Leaderboard Docker Image
          - task: Docker@2
            displayName: "Build and push leaderboard image"
            inputs:
              command: buildAndPush
              buildContext: $(Build.Repository.LocalPath)
              repository: $(leaderboardRepository)
              dockerfile: "$(Build.SourcesDirectory)/Tailspin.SpaceGame.LeaderboardContainer/Dockerfile"
              containerRegistry: "Container Registry Connection"
              tags: |
                $(tag)

          # Publish the manifests artifact (for AKS deployment)
          - publish: "$(Build.SourcesDirectory)/manifests"
            artifact: manifests

  # ---------------------------
  # Deploy Stage (AKS Only)
  # ---------------------------
  - stage: "Deploy"
    displayName: "Deploy to AKS"
    jobs:
      - job: "DeployToK8s"
        displayName: "Deploy to AKS Cluster"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          # Install kubelogin for AAD authentication
          - script: |
              # Download kubelogin
              curl -LO https://github.com/Azure/kubelogin/releases/download/v0.0.21/kubelogin-linux-amd64.zip

              # Unzip the kubelogin archive
              unzip kubelogin-linux-amd64.zip

              # Check if kubelogin was unzipped correctly
              if [ -f "./bin/linux_amd64/kubelogin" ]; then
                echo "kubelogin downloaded and unzipped successfully."
                sudo mv ./bin/linux_amd64/kubelogin /usr/local/bin/
              else
                echo "Error: kubelogin not found after unzip."
                exit 1
              fi
            displayName: "Install kubelogin for AAD authentication"

          # Authenticate Azure CLI using Service Principal
          - task: AzureCLI@2
            displayName: "Authenticate Azure CLI"
            inputs:
              azureSubscription: "Resource Manager - ClassicArmDemoAPI" # ARM service connection
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                echo "Logged in to Azure using Service Principal"
                az aks get-credentials --resource-group RG-FINALDEVOPS-SEA --name usecasefinaldevops --overwrite-existing

          # Download the published manifests (deployment & service files)
          - download: current
            artifact: manifests

          # Create Image Pull Secret for AKS (to pull images from the container registry)
          - task: KubernetesManifest@1
            displayName: "Create imagePullSecret for AKS"
            inputs:
              action: createSecret
              connectionType: azureResourceManager
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: "Container Registry Connection" # Docker service connection
              azureSubscriptionConnection: "Resource Manager - ClassicArmDemoAPI" # ARM service connection
              azureSubscription: "Resource Manager - ClassicArmDemoAPI" # ARM service connection
              azureResourceGroup: "RG-FINALDEVOPS-SEA"
              kubernetesCluster: "usecasefinaldevops" # Your AKS cluster name
              namespace: "default"

          # Deploy Docker containers to AKS
          - task: KubernetesManifest@1
            displayName: "Deploy to AKS Cluster"
            inputs:
              action: deploy
              connectionType: azureResourceManager
              azureSubscriptionConnection: "Kubernetes Cluster Connection" # Kubernetes service connection
              azureResourceGroup: "RG-FINALDEVOPS-SEA"
              kubernetesCluster: "usecasefinaldevops" # Your AKS cluster name
              namespace: "default"
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(RegistryName)/$(webRepository):$(tag)
                $(RegistryName)/$(leaderboardRepository):$(tag)
